# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import realtime_rec.protobuf.vector_engine_pb2 as vector__engine__pb2


class VecEngineServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DoSearch = channel.unary_unary(
                '/proto.VecEngineService/DoSearch',
                request_serializer=vector__engine__pb2.VecEngineRequest.SerializeToString,
                response_deserializer=vector__engine__pb2.VecEngineResponse.FromString,
                )
        self.DoUpdateVector = channel.unary_unary(
                '/proto.VecEngineService/DoUpdateVector',
                request_serializer=vector__engine__pb2.UpdateVectorRequest.SerializeToString,
                response_deserializer=vector__engine__pb2.UpdateVectorResponse.FromString,
                )
        self.DoCreateCollection = channel.unary_unary(
                '/proto.VecEngineService/DoCreateCollection',
                request_serializer=vector__engine__pb2.CreateCollectionRequest.SerializeToString,
                response_deserializer=vector__engine__pb2.CreateCollectionResponse.FromString,
                )
        self.DoDropCollection = channel.unary_unary(
                '/proto.VecEngineService/DoDropCollection',
                request_serializer=vector__engine__pb2.DropCollectionRequest.SerializeToString,
                response_deserializer=vector__engine__pb2.DropCollectionResponse.FromString,
                )
        self.DoSearchByVector = channel.unary_unary(
                '/proto.VecEngineService/DoSearchByVector',
                request_serializer=vector__engine__pb2.SearchByVectorRequest.SerializeToString,
                response_deserializer=vector__engine__pb2.VecEngineResponse.FromString,
                )


class VecEngineServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DoSearch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DoUpdateVector(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DoCreateCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DoDropCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DoSearchByVector(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VecEngineServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DoSearch': grpc.unary_unary_rpc_method_handler(
                    servicer.DoSearch,
                    request_deserializer=vector__engine__pb2.VecEngineRequest.FromString,
                    response_serializer=vector__engine__pb2.VecEngineResponse.SerializeToString,
            ),
            'DoUpdateVector': grpc.unary_unary_rpc_method_handler(
                    servicer.DoUpdateVector,
                    request_deserializer=vector__engine__pb2.UpdateVectorRequest.FromString,
                    response_serializer=vector__engine__pb2.UpdateVectorResponse.SerializeToString,
            ),
            'DoCreateCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.DoCreateCollection,
                    request_deserializer=vector__engine__pb2.CreateCollectionRequest.FromString,
                    response_serializer=vector__engine__pb2.CreateCollectionResponse.SerializeToString,
            ),
            'DoDropCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.DoDropCollection,
                    request_deserializer=vector__engine__pb2.DropCollectionRequest.FromString,
                    response_serializer=vector__engine__pb2.DropCollectionResponse.SerializeToString,
            ),
            'DoSearchByVector': grpc.unary_unary_rpc_method_handler(
                    servicer.DoSearchByVector,
                    request_deserializer=vector__engine__pb2.SearchByVectorRequest.FromString,
                    response_serializer=vector__engine__pb2.VecEngineResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.VecEngineService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VecEngineService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DoSearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.VecEngineService/DoSearch',
            vector__engine__pb2.VecEngineRequest.SerializeToString,
            vector__engine__pb2.VecEngineResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DoUpdateVector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.VecEngineService/DoUpdateVector',
            vector__engine__pb2.UpdateVectorRequest.SerializeToString,
            vector__engine__pb2.UpdateVectorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DoCreateCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.VecEngineService/DoCreateCollection',
            vector__engine__pb2.CreateCollectionRequest.SerializeToString,
            vector__engine__pb2.CreateCollectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DoDropCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.VecEngineService/DoDropCollection',
            vector__engine__pb2.DropCollectionRequest.SerializeToString,
            vector__engine__pb2.DropCollectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DoSearchByVector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.VecEngineService/DoSearchByVector',
            vector__engine__pb2.SearchByVectorRequest.SerializeToString,
            vector__engine__pb2.VecEngineResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
